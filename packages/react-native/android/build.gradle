buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["Ocr_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}


def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

plugins {
  id "de.undercouch.download" version "5.6.0"
}
apply plugin: "com.android.library"
apply plugin: "kotlin-android"


if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Ocr_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Ocr_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.ocr"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    
    externalNativeBuild {
      cmake {
        // cppFlags "-std=c++2b -O2 -frtti -fexceptions -Wall -fstack-protector-all"
        cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
      }
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          "src/newarch",
          // This is needed to build Kotlin project with NewArch enabled
          "${project.buildDir}/generated/source/codegen/java"
        ]
      } else {
        java.srcDirs += ["src/oldarch"]
      }
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "RNOcr"
    codegenJavaPackageName = "com.ocr"
  }
}

// Task to download the OpenCV zip file
task downloadOpenCV(type: Download) {
    src 'https://github.com/opencv/opencv/releases/download/4.9.0/opencv-4.9.0-android-sdk.zip'
    dest layout.buildDirectory.file("opencv-4.9.0-android-sdk.zip")
    overwrite false
}
task extractOpenCV(dependsOn: downloadOpenCV, type: Copy) {
    from zipTree(downloadOpenCV.dest)
    into layout.buildDirectory
}
preBuild.dependsOn extractOpenCV


// Task to download the ONNX Runtime zip file
task downloadOnnxruntime(type: Download) {
    src 'https://repo1.maven.org/maven2/com/microsoft/onnxruntime/onnxruntime-android/1.17.3/onnxruntime-android-1.17.3.aar'
    dest layout.buildDirectory.file("onnxruntime-android-1.17.3.aar")
    overwrite false
}
task extractOnnxruntime(dependsOn: downloadOnnxruntime, type: Copy) {
    from zipTree(downloadOnnxruntime.dest)
    into layout.buildDirectory.dir("onnxruntime")
}
preBuild.dependsOn extractOnnxruntime
extractOnnxruntime.mustRunAfter extractOpenCV